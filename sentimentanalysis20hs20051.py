# -*- coding: utf-8 -*-
"""SentimentAnalysis20HS20051.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17z6M1Iu2O_1ctJLzdsBjtFDxJlp2mXpL
"""

import nltk

nltk.download()

import numpy as np
import pandas as pd

yelp=pd.read_csv('/yelp.csv')

yelp.head()

yelp.info()

yelp.describe()

# Commented out IPython magic to ensure Python compatibility.
yelp['text length'] = yelp['text'].apply(len)
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

g = sns.FacetGrid(yelp,col='stars')
g.map(plt.hist,'text length')

sns.countplot(x='stars',data=yelp,palette='rainbow')

stars = yelp.groupby('stars').mean()
stars

stars.corr()

sns.heatmap(stars.corr(),cmap='coolwarm',annot=True)

yelp_class = yelp[(yelp.stars==1)|(yelp.stars==5)]
yelp_class

X = yelp_class['text']
y = yelp_class['stars']

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer()
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.3,random_state=101)
from sklearn.ensemble import RandomForestClassifier
rb = RandomForestClassifier()
from sklearn.naive_bayes import MultinomialNB
nb = MultinomialNB()
from sklearn.feature_extraction.text import  TfidfTransformer
from sklearn.pipeline import Pipeline

pipeline = Pipeline([
    ('bow', CountVectorizer()),  # strings to token integer counts
    ('tfidf', TfidfTransformer()),  # integer counts to weighted TF-IDF scores
    ('classifier', RandomForestClassifier()),  # train on TF-IDF vectors w/ RandomForest classifier
])

pipeline.fit(X_train,y_train)


predictions = pipeline.predict(X_test)

from sklearn.metrics import confusion_matrix,classification_report
print(confusion_matrix(y_test,predictions))
print(classification_report(y_test,predictions))

pipeline = Pipeline([
    ('bow', CountVectorizer()),  # strings to token integer counts
    ('classifier', MultinomialNB()),  # train on Naive Bayes classifier
])

X = yelp_class['text']
y = yelp_class['stars']
X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.3,random_state=101)

pipeline.fit(X_train,y_train)

predictions = pipeline.predict(X_test)

print(confusion_matrix(y_test,predictions))
print(classification_report(y_test,predictions))